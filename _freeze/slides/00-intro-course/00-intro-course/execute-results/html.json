{
  "hash": "9f8db4c977cfe11ca97ff4225875370a",
  "result": {
    "markdown": "---\ntitle: Generalized Linear Models\nsubtitle: Course overview\ninstitute: \"University of Padova\"\nauthor: \n  - name: \"Filippo Gambarota\"\n    email: filippo.gambarota@unipd.it\n    twitter: fgambarota\n    github: filippogambarota\nformat:\n  quarto-slides-revealjs:\n    code-fold: false\n    incremental: true\n    code-link: true\n    code-line-numbers: false\n    html-math-method: mathjax\n    filters:\n      - nutshell\n      - code-fullscreen\nfrom: markdown+emoji\ndate: last-modified\ndate-format: \"YYYY\"\nfinal-slide: false\nupdated: \"*Last Update: 2023-11-29*\"\n---\n\n\n\n\n\n# Material {.section}\n\n## Github\n\nThe material is available on **Github** You can find the slides, code, datasets and other stuff.\n\n<h4 style=\"text-align:center\">\n    <a href=\"https://stat-teaching.github.io/GLMphd/\">stat-teaching.github.io/GLMphd</a> \n</h4>\n\n## Getting started\n\n1. Download the repository from Github\n2. Unzip the folder\n3. Open the `GLMphd.Rproj` file\n\n# R {.section}\n\n## R style\n\nI use sometimes a coding style that is not common. I try to stay as close as possible to base R. But here some general patterns that you will see:\n\n**Accessing functions within a package**, if I don't want to load it:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nMASS::mvrnorm()\n```\n:::\n\n\n## R style\n\n**Especially in slides or quick exploratory analysis, extensive use of pipes |> or %>%**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nas.character(round(mean(iris$Sepal.Length)))\n\n# equivalent but more clear\niris$Sepal.Length |> \n  mean() |> \n  round() |> \n  as.character()\n```\n:::\n\n\n## R style\n\nUse of the `tidyverse` package for data-manipulation using `dplyr`, `tidyr`, etc. Sometimes you will se a `tibble` object. It is only a dataframe with some extra features.\n\n\n::: {.cell}\n\n```{.r .cell-code}\niris |> \n  group_by(Species) |> \n  summarise(Sepal.Length = mean(Sepal.Length))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 √ó 2\n  Species    Sepal.Length\n  <fct>             <dbl>\n1 setosa             5.01\n2 versicolor         5.94\n3 virginica          6.59\n```\n:::\n\n```{.r .cell-code}\n# in base R\naggregate(Sepal.Length ~ Species, iris, mean)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     Species Sepal.Length\n1     setosa        5.006\n2 versicolor        5.936\n3  virginica        6.588\n```\n:::\n:::\n\n\n## R style\n\nExtensive use of `*apply` like function (functional programming) to make iterations. In the examples I use `for` loops because because is more transparent.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmeans <- vector(mode = \"numeric\", length = ncol(mtcars))\nfor(i in 1:length(means)){\n  means[i] <- mean(mtcars[[i]])\n}\nmeans\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]  20.090625   6.187500 230.721875 146.687500   3.596563   3.217250\n [7]  17.848750   0.437500   0.406250   3.687500   2.812500\n```\n:::\n\n```{.r .cell-code}\n# equivalent to\nsapply(mtcars, mean)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       mpg        cyl       disp         hp       drat         wt       qsec \n 20.090625   6.187500 230.721875 146.687500   3.596563   3.217250  17.848750 \n        vs         am       gear       carb \n  0.437500   0.406250   3.687500   2.812500 \n```\n:::\n:::\n\n\n## R style\n\nFor plotting I use `ggplot2`. Is not super easy at the beginning but it pays off.\n\n\n::: {.cell}\n\n```{.r .cell-code}\niris |> \n  ggplot(aes(x = Sepal.Length, y = Petal.Width, color = Species)) +\n  geom_point() +\n  geom_smooth(method = \"lm\")\n```\n\n::: {.cell-output-display}\n![](00-intro-course_files/figure-revealjs/unnamed-chunk-6-1.png){width=960}\n:::\n:::\n\n\n## R Studio projects\n\nIf you have trouble understanding and using the working directory and `setwd()` I highly suggest you to use the R Studio projects.\n\nThe `*.Rproj` can be created in a folder and when you open the file R Studio will open an R session setting the working directory automatically.\n\nAll the paths will be **relative** to the `*.Rproj` file. You can move the folder or share it with other people without worrying about file location.\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](img/rproj.png){fig-align='center' width=483}\n:::\n:::\n\n\n## Contents\n\n- Overview about GLM and why they are useful\n- Binomial, Poisson and Gamma GLM\n  - Fitting the model\n  - Parameters interpretation\n  - Diagnostic\n- Simulating data\n  - Understanding the data generation process\n  - Power analysis\n  - (for fun üòÅ)\n  - ...\n",
    "supporting": [
      "00-intro-course_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}